- name: Evaluate namespace {{ microcks_project }}
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    api_version: v1
    kind: Namespace
    name: '{{ microcks_project }}'
    state: present

- name: Evaluate Group {{ microcks_project }}
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    state: present
    kind: OperatorGroup
    api_version: operators.coreos.com/v1
    namespace: '{{ microcks_project }}'
    definition:
      metadata:
        name: '{{ microcks_project }}-group'
      spec:
        targetNamespaces:
          - '{{ microcks_project }}'

- name: Evaluate Microcks Subscription
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    state: present
    resource_definition: "{{ lookup('template', 'microcks-subscription.yaml.j2') }}"

- name: Wait for Microcks operator to install
  kubernetes.core.k8s_info:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: microcksinstalls.microcks.github.io
  register: crd_microcks
  until: crd_microcks.resources | list | length == 1
  retries: 10
  delay: 30

- name: Evaluate Microcks Install
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    state: present
    resource_definition: "{{ lookup('template', 'microcks-install.yaml.j2') }}"

- name: Wait for Microcks to be running
  ansible.builtin.uri:
    url: https://microcks-{{ microcks_project }}.{{ route_subdomain }}
    status_code: '200'
  register: result
  until: result.status == 200
  retries: 90
  delay: 30

- name: Wait for Microcks Keycloak to be running
  ansible.builtin.uri:
    url: https://microcks-keycloak-{{ microcks_project }}.{{ route_subdomain }}
    status_code: '200'
  register: result
  until: result.status == 200
  retries: 20
  delay: 30

- name: Extract key_cloak_admin_password
  kubernetes.core.k8s_info:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    kind: Secret
    name: microcks-keycloak-admin
    namespace: '{{ microcks_project }}'
  register: key_cloak_result

- name: Set the username and password
  ansible.builtin.set_fact:
    key_cloak_admin_password: "{{ key_cloak_result.resources[0].data.password | b64decode }}"
    key_cloak_admin_username: "{{ key_cloak_result.resources[0].data.username | b64decode }}"


- name: Get Admin Token from Keycloack
  ansible.builtin.uri:
    url: https://microcks-keycloak-{{ microcks_project }}.{{ route_subdomain }}/realms/master/protocol/openid-connect/token
    method: POST
    body_format: form-urlencoded
    body:
      client_id: admin-cli
      username: "{{ key_cloak_admin_username }}"
      password: "{{ key_cloak_admin_password }}"
      grant_type: password
    status_code: '200'
  register: token_result

- name: Extract Admin Token from Keycloack from result
  ansible.builtin.set_fact:
    admin_token: '{{ token_result.json.access_token }}'


- name: Increase Token Lifespan (60mins)
  ansible.builtin.uri:
    url: 'https://microcks-keycloak-{{ microcks_project }}.{{ route_subdomain }}/admin/realms/master'
    method: PUT
    body:
      realm: "master"
      accessTokenLifespan: "3600"
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ admin_token }}"
    return_content: true
    validate_certs: false
    status_code: 204

- name: Get Admin Token with Longer Lifespan
  ansible.builtin.uri:
    url: https://microcks-keycloak-{{ microcks_project }}.{{ route_subdomain }}/realms/master/protocol/openid-connect/token
    method: POST
    body_format: form-urlencoded
    body:
      client_id: admin-cli
      username: "{{ key_cloak_admin_username }}"
      password: "{{ key_cloak_admin_password }}"
      grant_type: password
    status_code: '200'
  register: token_result

- name: Extract Admin Token with Longer Lifespan from Keycloack from result
  ansible.builtin.set_fact:
    admin_token: '{{ token_result.json.access_token }}'

- name: Create Microcks users
  ansible.builtin.uri:
    url: 'https://microcks-keycloak-{{ microcks_project }}.{{ route_subdomain }}/admin/realms/microcks/users'
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ admin_token }}"
    body:
      username: "{{ microcks_username }}"
      enabled: true
      firstName: "{{ microcks_username }}"
      credentials:
        - type: "password"
          value: "{{ microcks_password }}"
          temporary: false
    body_format: json
    validate_certs: false
    status_code: [201, 409]
